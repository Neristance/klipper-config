#####################################################################
#   Macros
#####################################################################
[idle_timeout]
timeout = 600
gcode:
	{% if printer.pause_resume.is_paused %}
	  M117 "timeout ignored because printer state == paused."
	{% else %}
    M18
	  TURN_OFF_HEATERS
	  UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=60
	{% endif %}
	
[gcode_macro POWER_OFF_PRINTER]
gcode =
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

                             
[delayed_gcode DELAYED_PRINTER_OFF]
initial_duration = 0.
gcode =
  {% if printer.idle_timeout.state == "Idle" %}
    {% if printer["extruder"].temperature > 50 %}
      UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=60
    {% else %}
      POWER_OFF_PRINTER
    {% endif %}
  {% else %}
    M118 Printer not idle, cancelled PRINTER_OFF.
  {% endif %}
  
[gcode_macro G32]
gcode:
    STATUS_HOMING
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_READY
   
[gcode_macro START_PRINT]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set SKIRTLOOPS = params.SKIRTLOOPS|default(0)|int %}

    STATUS_HEATING
    M140 S{BED_TEMP}        ; start heating bed
    M104 S{EXTRUDER_TEMP}   ; start heating nozzle

    G32                     ; home all axes
    G90
    G0 X175 Y175 Z30 F3600  ; move nozzle away from bed

    STATUS_HEATING
    M109 S{EXTRUDER_TEMP}    ; wait for nozzle to reach temperature
    M190 S{BED_TEMP}         ; wait for bed to reach temperature

    STATUS_HOMING
    G28 Z                    ; Home Z once again after everything is on temperature
    G90
    G0 X175 Y175 Z30 F3600
    STATUS_PRINTING
   

[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    STATUS_READY
    
    SET_LED LED=caselight RED=0 GREEN=0 BLUE=0

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
  STATUS_PAUSE

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  STATUS_PRINTING

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  END_PRINT

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(250) %}
    STATUS_BUSY
    G91
    G1 E50 F{speed}
    G1 E-1 F{speed}
    G92
    STATUS_READY

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(250) %}
    STATUS_BUSY
    G91
    G1 E-100 F{speed}
    G92
    STATUS_READY